package com.example.demo.controller;

import com.example.demo.entity.Dispute;
import com.example.demo.entity.DisputeStatus;
import com.example.demo.repository.DisputeRepository;
import com.example.demo.repository.TransactionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/user/disputes")
@RequiredArgsConstructor
@Slf4j
public class UserDisputeController {

    private final DisputeRepository disputeRepository;
    private final TransactionRepository transactionRepository;

    // ðŸŸ¢ User má»Ÿ tranh cháº¥p
    @PostMapping("/open")
    public ResponseEntity<?> openDispute(@RequestParam Long txId,
                                         @RequestParam String reason,
                                         @RequestParam(required = false) String evidenceUrl,
                                         @RequestParam Long openedByUserId) {
        log.info("User {} má»Ÿ tranh cháº¥p cho transaction {}", openedByUserId, txId);

        // Kiá»ƒm tra giao dá»‹ch cÃ³ tá»“n táº¡i khÃ´ng
        return transactionRepository.findById(txId)
                .<ResponseEntity<?>>map(tx -> {
                    // Kiá»ƒm tra náº¿u giao dá»‹ch Ä‘Ã£ cÃ³ tranh cháº¥p trÆ°á»›c Ä‘Ã³
                    boolean exists = disputeRepository.existsByTransactionId(txId);
                    if (exists) {
                        return ResponseEntity.status(HttpStatus.CONFLICT)
                                .body(Map.of(
                                        "error", "Transaction already has an active dispute",
                                        "transactionId", txId
                                ));
                    }

                    // Táº¡o má»›i dispute
                    Dispute dispute = new Dispute();
                    dispute.setTransaction(tx);
                    dispute.setReason(reason);
                    dispute.setEvidenceUrl(evidenceUrl);
                    dispute.setOpenedByUserId(openedByUserId);
                    dispute.setOpenedAt(LocalDateTime.now());
                    dispute.setStatus(DisputeStatus.PENDING);

                    disputeRepository.save(dispute);

                    log.info("Dispute {} created successfully for transaction {}", dispute.getId(), txId);
                    return ResponseEntity.status(HttpStatus.CREATED)
                            .body(Map.of(
                                    "message", "Dispute opened successfully",
                                    "disputeId", dispute.getId(),
                                    "transactionId", txId,
                                    "status", "PENDING"
                            ));
                })
                .orElseGet(() -> {
                    log.warn("Transaction not found with ID {}", txId);
                    return ResponseEntity.status(HttpStatus.NOT_FOUND)
                            .body(Map.of("error", "Transaction not found with ID " + txId));
                });
    }

    // ðŸŸ¡ (Optional) User xem láº¡i danh sÃ¡ch tranh cháº¥p cá»§a chÃ­nh mÃ¬nh
    @GetMapping("/my/{userId}")
    public ResponseEntity<?> getMyDisputes(@PathVariable Long userId) {
        log.info("User {} yÃªu cáº§u xem danh sÃ¡ch tranh cháº¥p cá»§a mÃ¬nh", userId);
        List<Dispute> disputes = disputeRepository.findByOpenedByUserId(userId);

        if (disputes.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NO_CONTENT)
                    .body(Map.of("message", "No disputes found for user " + userId));
        }

        return ResponseEntity.ok(Map.of(
                "total", disputes.size(),
                "data", disputes
        ));
    }

    // ðŸŸ¡ (Optional) Xem chi tiáº¿t 1 tranh cháº¥p cá»¥ thá»ƒ (náº¿u cáº§n hiá»ƒn thá»‹ chi tiáº¿t trÃªn giao diá»‡n)
    @GetMapping("/{id}")
    public ResponseEntity<?> getDisputeById(@PathVariable Long id) {
        log.info("User xem chi tiáº¿t tranh cháº¥p {}", id);
        return disputeRepository.findById(id)
                .<ResponseEntity<?>>map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body(Map.of("error", "Dispute not found with ID " + id)));
    }
}
